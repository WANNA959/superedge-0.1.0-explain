/*
Copyright 2020 The SuperEdge Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamMsg struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Category             string   `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Topic                string   `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Addr                 string   `protobuf:"bytes,6,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamMsg) Reset()         { *m = StreamMsg{} }
func (m *StreamMsg) String() string { return proto.CompactTextString(m) }
func (*StreamMsg) ProtoMessage()    {}
func (*StreamMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *StreamMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamMsg.Unmarshal(m, b)
}
func (m *StreamMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamMsg.Marshal(b, m, deterministic)
}
func (m *StreamMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMsg.Merge(m, src)
}
func (m *StreamMsg) XXX_Size() int {
	return xxx_messageInfo_StreamMsg.Size(m)
}
func (m *StreamMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMsg proto.InternalMessageInfo

func (m *StreamMsg) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *StreamMsg) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *StreamMsg) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StreamMsg) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *StreamMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StreamMsg) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamMsg)(nil), "proto.StreamMsg")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xbd, 0x8c, 0x5c,
	0x9c, 0xc1, 0x60, 0x71, 0xdf, 0xe2, 0x74, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xfc, 0x94, 0x54, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x8a, 0x8b, 0x23, 0x39, 0xb1, 0x24, 0x35,
	0x3d, 0xbf, 0xa8, 0x52, 0x82, 0x09, 0x2c, 0x0e, 0xe7, 0x83, 0xd4, 0x97, 0x54, 0x16, 0xa4, 0x4a,
	0x30, 0x43, 0xd4, 0x83, 0xd8, 0x42, 0x22, 0x5c, 0xac, 0x25, 0xf9, 0x05, 0x99, 0xc9, 0x12, 0x2c,
	0x60, 0x41, 0x08, 0x07, 0xa4, 0x32, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x55, 0x81, 0x51, 0x83, 0x27,
	0x08, 0xcc, 0x06, 0x89, 0x25, 0xa6, 0xa4, 0x14, 0x49, 0xb0, 0x41, 0x74, 0x83, 0xd8, 0x46, 0xae,
	0x5c, 0x6c, 0x10, 0xe7, 0x08, 0x59, 0x73, 0xf1, 0x87, 0x94, 0xe6, 0xe5, 0xa5, 0xe6, 0x40, 0xf8,
	0x99, 0x79, 0xe9, 0x42, 0x02, 0x10, 0xb7, 0xeb, 0xc1, 0x1d, 0x2c, 0x85, 0x21, 0xa2, 0xc4, 0xa0,
	0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0x16, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x49,
	0x6f, 0x83, 0xf4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	TunnelStreaming(ctx context.Context, opts ...grpc.CallOption) (Stream_TunnelStreamingClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) TunnelStreaming(ctx context.Context, opts ...grpc.CallOption) (Stream_TunnelStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/proto.Stream/TunnelStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTunnelStreamingClient{stream}
	return x, nil
}

type Stream_TunnelStreamingClient interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ClientStream
}

type streamTunnelStreamingClient struct {
	grpc.ClientStream
}

func (x *streamTunnelStreamingClient) Send(m *StreamMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTunnelStreamingClient) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	TunnelStreaming(Stream_TunnelStreamingServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) TunnelStreaming(srv Stream_TunnelStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method TunnelStreaming not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_TunnelStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).TunnelStreaming(&streamTunnelStreamingServer{stream})
}

type Stream_TunnelStreamingServer interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ServerStream
}

type streamTunnelStreamingServer struct {
	grpc.ServerStream
}

func (x *streamTunnelStreamingServer) Send(m *StreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTunnelStreamingServer) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TunnelStreaming",
			Handler:       _Stream_TunnelStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
